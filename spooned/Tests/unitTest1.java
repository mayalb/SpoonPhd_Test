package Tests;
public class unitTest1 {
    @org.junit.Test
    public void ReverseCodeTest() {
        java.lang.String inputCode = (((((((((((((((((((((((((((((("class XYDataItem {\n" + "public XYDataItem addOrUpdate(Number x, Number y) {\n") + "if (x == null) {\n") + "throw new IllegalArgumentException(\"Null 'x' argument.\");\n") + "}\n") + "XYDataItem overwritten = null;\n") + "int index = indexOf(x);\n") + "if (index >= 0 && !this.allowDuplicateXValues) {\n") + "XYDataItem existing = (XYDataItem) this.data.get(index);\n") + "try {\n") + "overwritten = (XYDataItem) existing.clone();\n") + "}\n") + "catch (CloneNotSupportedException e) {\n") + "throw new SeriesException(\"Couldn't clone XYDataItem!\");\n") + "} \n") + "existing.setY(y);\n") + "}\n") + "else {\n") + "if (this.autoSort) {\n") + "this.data.add(-index - 1, new XYDataItem(x, y));\n") + "}\n") + "else {\n") + "this.data.add(new XYDataItem(x, y));\n") + "}\n") + "if (getItemCount() > this.maximumItemCount) {\n") + "this.data.remove(0);\n") + "}\n") + "}\n") + "fireSeriesChanged();\n") + "return overwritten;\n") + "}\n") + "}";
        java.lang.String expectedCode = (((((((((((((((((((((((((((((("class XYDataItem{\n" + "public XYDataItem addOrUpdate(Number x, Number y) {\n") + "if (x != null) {\n") + "throw new IllegalArgumentException(\"Null 'x' argument.\");\n") + "}\n") + "XYDataItem overwritten = null;\n") + "int index = indexOf(x);\n") + "if (index <= 0 || !this.allowDuplicateXValues) {\n") + "XYDataItem existing = (XYDataItem) this.data.get(index);\n") + "try {\n") + "overwritten = (XYDataItem) existing.clone();\n") + "}\n") + "catch (CloneNotSupportedException e) {\n") + "throw new SeriesException(\"Couldn't clone XYDataItem!\");\n") + "}\n") + "existing.setY(y);\n") + "}\n") + "else {\n") + "if (this.autoSort) {\n") + "this.data.add(-index - 1, new XYDataItem(x, y));\n") + "}\n") + "else {\n") + "this.data.add(new XYDataItem(x, y));\n") + "}\n") + "if (getItemCount() < this.maximumItemCount) {\n") + "this.data.remove(0);\n") + "}\n") + "}\n") + "fireSeriesChanged();\n") + "return overwritten;\n") + "}\n") + "}";
        spoon.reflect.declaration.CtClass expected = spoon.Launcher.parseClass(expectedCode);
        // System.out.println(expected);
        spoon.reflect.declaration.CtClass original = spoon.Launcher.parseClass(inputCode);
        org.example.Reverse.reverseOperators(original);
        org.junit.Assert.assertEquals(expected.toString(), expected.toString());
    }
}